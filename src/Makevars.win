##
####### -----  Clear include and library paths -------------------------------------------------------------------------------------
INCLUDE_PATH=
LIBRARY_PATH=
##
# Get R library path (this will work for any R version)
## R_LIB_PATH = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(.libPaths()[grep('00LOCK|00new', .libPaths(), invert=TRUE)][1])")
## $(info R_LIB_PATH is: $(R_LIB_PATH))
##
####### -----  BayesMVP  paths -----------------------------------------------------------------------------------------------------
$(info R_HOME is: $(R_HOME))
##
override PKG_SRC_PATH=$(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(getwd())")
override PKG_PATH=$(patsubst %/src,%,$(PKG_SRC_PATH))
##
$(info PKG_SRC_PATH is: $(PKG_SRC_PATH))
$(info PKG_PATH is: $(PKG_PATH))
##
override PKG_LIB_PATH=$(PKG_PATH)/lib
override PKG_INST_PATH=$(PKG_PATH)/inst
override PKG_LIB_ARCH_PATH = $(PKG_PATH)/libs$(R_ARCH)
##
$(info PKG_LIB_PATH is: $(PKG_LIB_PATH))
$(info PKG_INST_PATH is: $(PKG_INST_PATH))
$(info PKG_LIB_ARCH_PATH is: $(PKG_LIB_ARCH_PATH))
##
####### ----- RTools path (root dir) - RTools path detection based on R version -------------------------------------------------------
override PC_ARCH = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(Sys.info()[['machine']])")
$(info PC_ARCH is: $(PC_ARCH))
##
# Get R version by extracting R version from R_HOME path (e.g., from "C:/PROGRA~1/R/R-44~1.2")
override R_VERSION_STRING = $(lastword $(subst /, ,$(R_HOME)))# Gets "R-44~1.2"
override R_VERSION_NUM = $(word 2,$(subst -, ,$(R_VERSION_STRING)))# Gets "44~1.2"
override R_VERSION = $(firstword $(subst ~, ,$(R_VERSION_NUM)))# Gets "44"
##
$(info R_VERSION_STRING is: $(R_VERSION_STRING))
$(info R_VERSION_NUM is: $(R_VERSION_NUM))
$(info R_VERSION is: $(R_VERSION))
##
## --- Construct RTools version (e.g., "rtools44" for R 4.4):
override RTOOLS_VERSION = rtools$(R_VERSION)
$(info RTOOLS_VERSION is: $(RTOOLS_VERSION))
## override RTOOLS_VERSION_HOME = $(RTOOLS_VERSION)_HOME
## $(info RTOOLS_VERSION_HOME is: $(RTOOLS_VERSION_HOME))
##
## override RTOOLS_PATH=C:/rtools44
override SYSTEM_DRIVE=$(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "system_drive <- Sys.getenv('SystemDrive'); cat(system_drive)")
override RTOOLS_PATH=$(SYSTEM_DRIVE)/$(RTOOLS_VERSION)
$(info RTOOLS_PATH is: $(RTOOLS_PATH))
##
####### ----- RTools paths (using MINGW64) -------------------------------------------------------------------------------------------
# Verify that the "mingw64" dir. exists 
ifeq (,$(wildcard $(RTOOLS_PATH)/mingw64))
  $(error RTools installation at $(RTOOLS_PATH) appears incomplete: missing mingw64 directory)
endif
## 
override RTOOLS_MINGW_PATH=$(RTOOLS_PATH)/mingw64
$(info RTOOLS_MINGW_PATH is: $(RTOOLS_MINGW_PATH))
override RTOOLS_MINGW_LIB_PATH=$(RTOOLS_MINGW_PATH)/lib
$(info RTOOLS_MINGW_LIB_PATH is: $(RTOOLS_MINGW_LIB_PATH))
override RTOOLS_MINGW_BIN_PATH=$(RTOOLS_MINGW_PATH)/bin
$(info RTOOLS_MINGW_BIN_PATH is: $(RTOOLS_MINGW_BIN_PATH))
override RTOOLS_MINGW_INCLUDE_PATH=$(RTOOLS_MINGW_PATH)/include
$(info RTOOLS_MINGW_INCLUDE_PATH is: $(RTOOLS_MINGW_INCLUDE_PATH))
override RTOOLS_MINGW_LIBCXX_INCLUDE_PATH=$(RTOOLS_MINGW_INCLUDE_PATH)/c++/v1
$(info RTOOLS_MINGW_LIBCXX_INCLUDE_PATH is: $(RTOOLS_MINGW_LIBCXX_INCLUDE_PATH))
##
## NOTE: RTOOLS_MINGW_GCC_INCLUDE_PATH contains "omp.h"
## override RTOOLS_MINGW_GCC_INCLUDE_PATH = $(RTOOLS_MINGW_LIB_PATH)/gcc/x86_64-w64-mingw32/14.2.0/include
## $(info RTOOLS_MINGW_GCC_INCLUDE_PATH is: $(RTOOLS_MINGW_GCC_INCLUDE_PATH))
##
####### ----- RTools paths (using CLANG64 i.e. *DIRECLTY* [i.e., not via gcc]  -------------------------------------------------------
####### ----- using the clang toolchains  + clang as the COMPILER (NOT g++))   -------------------------------------------------------
# Verify that the "clang64" dir. exists 
ifeq (,$(wildcard $(RTOOLS_PATH)/clang64))
  $(error RTools installation at $(RTOOLS_PATH) appears incomplete: missing clang64 directory)
endif
## 
override RTOOLS_CLANG64_PATH=$(RTOOLS_PATH)/clang64
$(info RTOOLS_CLANG64_PATH is: $(RTOOLS_CLANG64_PATH))
override RTOOLS_CLANG64_LIB_PATH=$(RTOOLS_CLANG64_PATH)/lib
$(info RTOOLS_CLANG64_LIB_PATH is: $(RTOOLS_CLANG64_LIB_PATH))
override RTOOLS_CLANG64_BIN_PATH=$(RTOOLS_CLANG64_PATH)/bin
$(info RTOOLS_CLANG64_BIN_PATH is: $(RTOOLS_CLANG64_BIN_PATH))
override RTOOLS_CLANG64_INCLUDE_PATH=$(RTOOLS_CLANG64_PATH)/include
$(info RTOOLS_CLANG64_INCLUDE_PATH is: $(RTOOLS_CLANG64_INCLUDE_PATH))
override RTOOLS_CLANG64_LIBCXX_INCLUDE_PATH=$(RTOOLS_CLANG64_INCLUDE_PATH)/c++/v1
$(info RTOOLS_CLANG64_LIBCXX_INCLUDE_PATH is: $(RTOOLS_CLANG64_LIBCXX_INCLUDE_PATH))
##
####### ----- CCACHE / ccache path [e.g.: "C:/rtools44/mingw64/bin/ccache.exe"] ---------------------------------------------------------------  
## Check for ccache
override CCACHE_PATH=$(RTOOLS_MINGW_BIN_PATH)/ccache.exe
override HAVE_CCACHE=$(wildcard $(CCACHE_PATH))
##
## Set CCACHE prefix only if available
ifneq (,$(HAVE_CCACHE))
  override CCACHE = "$(CCACHE_PATH)"
else
  override CCACHE =
endif
##
$(info CCACHE is: $(CCACHE))
##
######## ----- Compiler settings (RTools-CLANG64 is preferred) ----------------------------------------------------------------------   
## Check if clang++ is available in "clang64" folder, otherwise fall back to mingw64 (AVX features won't work with g++/gcc on Windows!!)
override CLANG_CXX_COMPILER = $(RTOOLS_CLANG64_BIN_PATH)/clang++
override CLANG_CPP_COMPILER = $(RTOOLS_CLANG64_BIN_PATH)/clang
##
override MINGW_CXX_COMPILER = $(RTOOLS_MINGW_BIN_PATH)/g++
override MINGW_CPP_COMPILER = $(RTOOLS_MINGW_BIN_PATH)/gcc
##
ifneq (,$(wildcard $(CLANG_CXX_COMPILER))) ## if clang (RTools "clang64") is available
  override CXX_COMPILER_TYPE = $(CCACHE) $(CLANG_CXX_COMPILER)
  override CPP_COMPILER_TYPE = $(CCACHE) $(CLANG_CPP_COMPILER)
  override CXX_STD = CXX17 # Use C++17
  override CPU_BASE_FLAGS = -O3  -march=native  -mtune=native
else
  override CXX_COMPILER_TYPE = $(CCACHE) $(MINGW_CXX_COMPILER)
  override CPP_COMPILER_TYPE = $(CCACHE) $(MINGW_CPP_COMPILER)
  override CXX_STD = -std=gnu++17 # Use C++17
  override CPU_BASE_FLAGS = -O3  -march=native  -mtune=native
endif
## 
##
####### ----- CPU Feature Detection (i.e., AVX, FMA, etc) -------------------------------------------------------------------------
##
override HAS_FMA = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" R_script_has_FMA.R)
override HAS_AVX = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" R_script_has_AVX.R)
override HAS_AVX2 = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" R_script_has_AVX2.R)
override HAS_AVX512 = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" R_script_has_AVX_512.R)
##
$(info CPU Features detected:)
$(info HAS_FMA: $(HAS_FMA))
$(info HAS_AVX: $(HAS_AVX))
$(info HAS_AVX2: $(HAS_AVX2))
$(info HAS_AVX512: $(HAS_AVX512))
##
####### ----- CPU flags - FMA  ---------------------------------------------------------------------------------------------------
##
## Initialize empty flags
override FMA_FLAGS =
##
ifeq ($(HAS_FMA),1)
  override FMA_FLAGS += -mfma
endif
##
####### ----- CPU flags - AVX  ---------------------------------------------------------------------------------------------------
##
## Initialize empty flags
override AVX_FLAGS =
##
## Only set AVX flags if using Clang (not GCC)
ifneq (,$(wildcard $(CLANG_CXX_COMPILER)))
    ifeq ($(HAS_AVX512),1)
        override AVX_FLAGS += -mavx -mavx2 -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl
    else ifeq ($(HAS_AVX2),1)
        override AVX_FLAGS += -mavx -mavx2
    else ifeq ($(HAS_AVX),1)
        override AVX_FLAGS += -mavx
    endif
else
    $(info GCC detected - disabling AVX features due to (unresolved) Windows GCC AVX bugs)
endif
##
####### ----- For MINGW GCC include additional path detection (needed for omp.h) ---------------------------------------------------
## "C:\rtools44\ucrt64\lib\gcc\x86_64-w64-mingw32\14.2.0\include\omp.h"
##
ifeq (,$(wildcard $(CLANG_CXX_COMPILER))) # Only needed if using gcc/g++
  ## Find the gcc version directory dynamically
  override GCC_VERSION_DIR = $(shell ls -d "$(RTOOLS_MINGW_LIB_PATH)/gcc/$(PC_ARCH)-w64-mingw32/"* 2>/dev/null | sort -rV | head -n1)
  $(info GCC_VERSION_DIR is: $(GCC_VERSION_DIR))
  ##
  ifeq ($(strip $(GCC_VERSION_DIR)),)
    $(error Could not find GCC include directory in $(RTOOLS_MINGW_LIB_PATH)/gcc/)
  endif
  ##
  override RTOOLS_MINGW_GCC_INCLUDE_PATH = $(GCC_VERSION_DIR)/include
  $(info RTOOLS_MINGW_GCC_INCLUDE_PATH is: $(RTOOLS_MINGW_GCC_INCLUDE_PATH))
  ##
  ## Verify omp.h exists
  ifeq (,$(wildcard $(RTOOLS_MINGW_GCC_INCLUDE_PATH)/omp.h))
    $(error Could not find omp.h in $(RTOOLS_MINGW_GCC_INCLUDE_PATH))
  endif
endif
##
####### ----- Final RTools paths (depends on whether compiler is RTools-Clang or RTools-gcc) ---------------------------------------
ifneq (,$(wildcard $(CLANG_CXX_COMPILER))) ## if clang (RTools "clang64") is available
  override RTOOLS_COMPILER_PATH=$(RTOOLS_CLANG64_PATH) 
  override RTOOLS_COMPILER_LIB_PATH=$(RTOOLS_CLANG64_LIB_PATH)
  override RTOOLS_COMPILER_BIN_PATH=$(RTOOLS_CLANG64_BIN_PATH)
  override RTOOLS_COMPILER_INCLUDE_PATH=$(RTOOLS_CLANG64_INCLUDE_PATH)
  override RTOOLS_COMPILER_LIBCXX_INCLUDE_PATH=$(RTOOLS_CLANG64_LIBCXX_INCLUDE_PATH)
else
  override RTOOLS_COMPILER_PATH=$(RTOOLS_MINGW_PATH)
  override RTOOLS_COMPILER_LIB_PATH=$(RTOOLS_MINGW_LIB_PATH)
  override RTOOLS_COMPILER_BIN_PATH=$(RTOOLS_MINGW_BIN_PATH)
  override RTOOLS_COMPILER_INCLUDE_PATH=$(RTOOLS_MINGW_INCLUDE_PATH)
  override RTOOLS_COMPILER_LIBCXX_INCLUDE_PATH=$(RTOOLS_MINGW_LIBCXX_INCLUDE_PATH)
endif
##
$(info RTOOLS_COMPILER_PATH is: $(RTOOLS_COMPILER_PATH))
$(info RTOOLS_COMPILER_LIB_PATH is: $(RTOOLS_COMPILER_LIB_PATH))
$(info RTOOLS_COMPILER_BIN_PATH is: $(RTOOLS_COMPILER_BIN_PATH))
$(info RTOOLS_COMPILER_INCLUDE_PATH is: $(RTOOLS_COMPILER_INCLUDE_PATH))
$(info RTOOLS_COMPILER_LIBCXX_INCLUDE_PATH is: $(RTOOLS_COMPILER_LIBCXX_INCLUDE_PATH))
##
####### ----- OpenMP flags ---------------------------------------------------------------------------------------------------------
##
ifneq (,$(wildcard $(CLANG_CXX_COMPILER))) ## if clang (RTools "clang64") is available
  override OMP_FLAGS = -fopenmp=libomp
else
  override OMP_FLAGS = -lgomp
endif
##
override OMP_LIB_FLAGS = $(OMP_FLAGS)
##
override SHLIB_OPENMP_CFLAGS = -I"$(RTOOLS_COMPILER_BIN_PATH)" $(OMP_FLAGS)
override SHLIB_OPENMP_CXXFLAGS = $(SHLIB_OPENMP_CFLAGS)
##
####### ----- set MATH_FLAGS ---------------------------------------------------------------------------------------------------------
## 
override MATH_FLAGS = -fno-math-errno  -fno-signed-zeros  -fno-trapping-math
$(info MATH_FLAGS: $(MATH_FLAGS))
##
####### ----- set WINDOWS_FLAGS (if any) ---------------------------------------------------------------------------------------------------------
##
override WINDOWS_FLAGS =
####### ----- set BASE_FLAGS -----------------------------------------------------------------------------------------------------
##
override RTOOLS_INCLUDE_PATHS = -I"$(RTOOLS_COMPILER_LIBCXX_INCLUDE_PATH)" \
                                -I"$(RTOOLS_COMPILER_BIN_PATH)" \
                                -I"$(RTOOLS_COMPILER_INCLUDE_PATH)"
##
ifneq (,$(wildcard $(MINGW_CXX_COMPILER))) ## if clang (RTools "clang64") is NOT available (so only g++/gcc)
  RTOOLS_INCLUDE_PATHS+=-I"$(RTOOLS_MINGW_GCC_INCLUDE_PATH)" ## this is needed for gcc/g++ as "omp.h" resides here 
endif
##
override CPU_FLAGS = $(CPU_BASE_FLAGS) $(FMA_FLAGS) $(AVX_FLAGS)
##
## ## GCC/Clang compiler flags to disable AVX (for debugging / testing on systems with no AVX):
## override CPU_FLAGS = $(CPU_BASE_FLAGS) -mno-avx -mno-avx2 -mno-avx512f -mno-avx512cd -mno-avx512bw -mno-avx512dq -mno-avx512vl
## ## Flags to disable FMA:
## override CPU_FLAGS += -mno-fma
##
override BASE_FLAGS =   $(CPU_FLAGS) \
                        $(MATH_FLAGS) \
                        $(WINDOWS_FLAGS) \
                        -Wno-error=ignored-attributes \
                        -Wno-error=implicit-function-declaration \
                        -Wno-pragma-pack \
                        -Wno-parentheses-equality \
                        $(RTOOLS_INCLUDE_PATHS) -nostdinc++ \
                        $(SHLIB_OPENMP_CFLAGS) \
                        -fPIC \
                        -D_REENTRANT -DSTAN_THREADS -pthread \
                        -fpermissive \
                        -DNDEBUG
##
## BASE_FLAGS += -V
##
##### CmDStan / Stan path(s)  --------------------------------------------------------------------------------------------------
## Find CmDStan path:
override CMDSTAN_PATH = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" R_script_find_cmdstan_path.R)
##
## Set other CmDStan paths:
override STAN_ROOT=$(CMDSTAN_PATH)/stan
override STAN_SRC=$(CMDSTAN_PATH)/stan/src
override STAN_BASE=$(CMDSTAN_PATH)/stan/src/stan
override STAN_LIB=$(CMDSTAN_PATH)/stan/lib
override STAN_MATH=$(CMDSTAN_PATH)/stan/lib/stan_math
override STAN_MATH_LIB=$(CMDSTAN_PATH)/stan/lib/stan_math/lib
##
## Print CmDStan paths:
$(info CMDSTAN_PATH found: $(CMDSTAN_PATH))
$(info STAN_ROOT is: $(STAN_ROOT))
$(info STAN_SRC is: $(STAN_SRC))
$(info STAN_BASE is: $(STAN_BASE))
$(info STAN_LIB is: $(STAN_LIB))
$(info STAN_MATH is: $(STAN_MATH))
$(info STAN_MATH_LIB is: $(STAN_MATH_LIB))
##
##### BridgeStan path(s)  -----------------------------------------------------------------------------------------------------
## Find BridgeStan path:
override BRIDGESTAN_PATH = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" R_script_find_bridgestan_path.R)
##
## Set other BridgeStan paths:
override BRIDGESTAN_SRC = $(BRIDGESTAN_PATH)/src
## override BRIDGESTAN_STAN_MATH_LIB=$(BRIDGESTAN)/stan/lib/stan_math/lib
##
## Print BridgeStan paths:
$(info BRIDGESTAN_PATH is: $(BRIDGESTAN_PATH))
$(info BRIDGESTAN_SRC is: $(BRIDGESTAN_SRC))
##
##### TBB path(s) [using cmdstan tbb] -----------------------------------------------------------------------------------------
##
override TBB_PATH=$(STAN_MATH_LIB)/tbb
$(info TBB_PATH is: $(TBB_PATH))
##
override TBB_DLL="$(PKG_INST_PATH)/tbb_stan/tbb.dll"## using the tbb.dll bundled with the package (which is the same as CmDStan v2.35 tbb.dll)
$(info TBB_DLL is: $(TBB_DLL))
##
##### PKG_CPPFLAGS / PKG_CXXFLAGS / CPPFLAGS / CXXFLAGS -----------------------------------------------------------------------
override  PKG_CPPFLAGS = $(BASE_FLAGS) \
    -I"$(STAN_MATH_LIB)/boost_1.84.0" \
    -I"$(STAN_MATH_LIB)/eigen_3.4.0" \
    -I"$(STAN_MATH_LIB)/sundials_6.1.1/include" \
    -I"$(STAN_MATH_LIB)/sundials_6.1.1" \
    -I"$(STAN_LIB)/rapidjson_1.1.0" \
    -I"$(STAN_LIB)/rapidjson_1.1.0/rapidjson" \
    -I"$(TBB_PATH)" \
    -I"$(STAN_MATH)" \
    -I"$(STAN_MATH_LIB)" \
    -I"$(STAN_ROOT)" \
    -I"$(STAN_SRC)" \
    -I"$(STAN_BASE)/model" \
    -I"$(STAN_BASE)/services" \
    -I"$(STAN_BASE)/io" \
    -I"$(STAN_BASE)/mcmc" \
    -I"$(STAN_BASE)/analyze" \
    -I"$(BRIDGESTAN_SRC)"
##
override PKG_CXXFLAGS = $(PKG_CPPFLAGS)
override CPPFLAGS = $(PKG_CPPFLAGS)
override CXXFLAGS = $(PKG_CPPFLAGS)
##
override CC  =  $(CPP_COMPILER_TYPE) 
override CXX =  $(CXX_COMPILER_TYPE) 
##
override CFLAGS =  $(CPPFLAGS)
override CC14 = $(CC)
override C14FLAGS = $(CPPFLAGS)
override CC17 = $(CC)
override C17FLAGS = $(CPPFLAGS)
override CC23 =  $(CC)
override C23FLAGS =  $(CPPFLAGS)
override CC90 =  $(CC)
override C90FLAGS = $(CPPFLAGS)
override CC99 =  $(CC)
override 99FLAGS = $(CPPFLAGS)
##
override CXXPICFLAGS = -fpic
override CXX11  =  $(CXX)
override CXX11FLAGS = $(CXXFLAGS)
override CXX11PICFLAGS = -fpic
override CXX14  =   $(CXX)
override CXX14FLAGS = $(CXXFLAGS)
override CXX14PICFLAGS = -fpic
override CXX17  =  $(CXX)
override CXX17FLAGS =  $(CXXFLAGS)
override CXX17PICFLAGS = -fpic
override CXX20  = $(CXX)
override CXX20FLAGS =   $(CXXFLAGS)
override CXX20PICFLAGS = -fpic
override CXX23  =  $(CXX)
override CXX23FLAGS =   $(CXXFLAGS)
override CXX23PICFLAGS = -fpic
##
##  ---------------------  Configure package libs ---------------------------------------------------------------------
override LD = $(CXX_COMPILER_TYPE)
override SHLIB_LD = $(CXX_COMPILER_TYPE)
##
## ---------------------  Initial link paths and libraries (PKG_LIBS) ------
## PKG_LIBS+=-L"$(LLVM_MINGW_LIB_PATH)" -lc++abi # libc++abi.a is static
override PKG_LIBS=-L"$(RTOOLS_COMPILER_LIB_PATH)" -lR -lc++ -lpthread $(OMP_LIB_FLAGS)
##
## ---------------------  Linker settings (LDFLAGS) ------------------------
override LDFLAGS+=-L"$(RTOOLS_COMPILER_LIB_PATH)" -fuse-ld=lld -stdlib=libc++ ## -nostdlib++
##
##  ---------------------  TBB libs ----------------------------------------
override PKG_LIBS+=$(TBB_DLL)# using the tbb.dll bundled with BayesMVP 
override PKG_LIBS+=-L"$(TBB_PATH)" -ltbb -lpthread ## using cmdstan tbb lib
##
##  ---------------------  Dummy model libs --------------------------------
override DUMMY_MODEL_SO="$(PKG_INST_PATH)/dummy_stan_model_win_model.so"
$(info DUMMY_MODEL_SO is: $(DUMMY_MODEL_SO))
override PKG_LIBS+=$(DUMMY_MODEL_SO) ## load the .so BEFORE the .dll (Windows only)
##
override DUMMY_MODEL_DLL="$(PKG_INST_PATH)/dummy_stan_model_win_model.dll"
$(info DUMMY_MODEL_DLL is: $(DUMMY_MODEL_DLL))
override PKG_LIBS+=$(DUMMY_MODEL_DLL)
##
##  ---------------------  RTOOLS compiler (e.g., CLANG64) libc++ DLL -------
override RTOOLS_COMPILER_LIBCXX_DLL = "$(RTOOLS_COMPILER_BIN_PATH)/libc++.dll"
$(info RTOOLS_COMPILER_LIBCXX_DLL is: $(RTOOLS_COMPILER_LIBCXX_DLL))
##
##  ---------------------  SHLIB / linking ----------------------------------------------------------------------------
.PHONY: $(SHLIB)
$(SHLIB): $(OBJECTS)
	-mkdir -p "$(PKG_LIB_ARCH_PATH)"
	-cp $(RTOOLS_COMPILER_LIBCXX_DLL) "$(PKG_LIB_ARCH_PATH)"
	$(SHLIB_LD) $(SHLIB_LDFLAGS) $(DLLFLAGS) -o $@ $(OBJECTS) $(ALL_LIBS)
##
##