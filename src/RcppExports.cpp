// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// checkCPUFeatures
Rcpp::List checkCPUFeatures();
RcppExport SEXP _BayesMVP_checkCPUFeatures() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(checkCPUFeatures());
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_wrapper_EIGEN_double_mat
Eigen::Matrix<double, -1, -1> Rcpp_wrapper_EIGEN_double_mat(const Eigen::Matrix<double, -1, -1> x, const std::string fn, const std::string vect_type, const bool skip_checks);
RcppExport SEXP _BayesMVP_Rcpp_wrapper_EIGEN_double_mat(SEXP xSEXP, SEXP fnSEXP, SEXP vect_typeSEXP, SEXP skip_checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const std::string >::type vect_type(vect_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type skip_checks(skip_checksSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_wrapper_EIGEN_double_mat(x, fn, vect_type, skip_checks));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_wrapper_EIGEN_double_colvec
Eigen::Matrix<double, -1, 1> Rcpp_wrapper_EIGEN_double_colvec(const Eigen::Matrix<double, -1, 1> x, const std::string fn, const std::string vect_type, const bool skip_checks);
RcppExport SEXP _BayesMVP_Rcpp_wrapper_EIGEN_double_colvec(SEXP xSEXP, SEXP fnSEXP, SEXP vect_typeSEXP, SEXP skip_checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const std::string >::type vect_type(vect_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type skip_checks(skip_checksSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_wrapper_EIGEN_double_colvec(x, fn, vect_type, skip_checks));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_wrapper_fn_lp_grad
Eigen::Matrix<double, -1, 1> Rcpp_wrapper_fn_lp_grad(const std::string Model_type, const bool force_autodiff, const bool force_PartialLog, const bool multi_attempts, const Eigen::Matrix<double, -1, 1> theta_main_vec, const Eigen::Matrix<double, -1, 1> theta_us_vec, const Eigen::Matrix<int, -1, -1> y, const std::string grad_option, const Rcpp::List Model_args_as_Rcpp_List);
RcppExport SEXP _BayesMVP_Rcpp_wrapper_fn_lp_grad(SEXP Model_typeSEXP, SEXP force_autodiffSEXP, SEXP force_PartialLogSEXP, SEXP multi_attemptsSEXP, SEXP theta_main_vecSEXP, SEXP theta_us_vecSEXP, SEXP ySEXP, SEXP grad_optionSEXP, SEXP Model_args_as_Rcpp_ListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type Model_type(Model_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_autodiff(force_autodiffSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_PartialLog(force_PartialLogSEXP);
    Rcpp::traits::input_parameter< const bool >::type multi_attempts(multi_attemptsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_main_vec(theta_main_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_us_vec(theta_us_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<int, -1, -1> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::string >::type grad_option(grad_optionSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Model_args_as_Rcpp_List(Model_args_as_Rcpp_ListSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_wrapper_fn_lp_grad(Model_type, force_autodiff, force_PartialLog, multi_attempts, theta_main_vec, theta_us_vec, y, grad_option, Model_args_as_Rcpp_List));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_compute_chain_stats
Rcpp::List Rcpp_compute_chain_stats(const std::vector<Eigen::Matrix<double, -1, -1>> mcmc_3D_array, const std::string stat_type, const int n_threads);
RcppExport SEXP _BayesMVP_Rcpp_compute_chain_stats(SEXP mcmc_3D_arraySEXP, SEXP stat_typeSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, -1, -1>> >::type mcmc_3D_array(mcmc_3D_arraySEXP);
    Rcpp::traits::input_parameter< const std::string >::type stat_type(stat_typeSEXP);
    Rcpp::traits::input_parameter< const int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_compute_chain_stats(mcmc_3D_array, stat_type, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_compute_MCMC_diagnostics
Rcpp::List Rcpp_compute_MCMC_diagnostics(const std::vector<Eigen::Matrix<double, -1, -1>> mcmc_3D_array, const std::string diagnostic, const int n_threads);
RcppExport SEXP _BayesMVP_Rcpp_compute_MCMC_diagnostics(SEXP mcmc_3D_arraySEXP, SEXP diagnosticSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, -1, -1>> >::type mcmc_3D_array(mcmc_3D_arraySEXP);
    Rcpp::traits::input_parameter< const std::string >::type diagnostic(diagnosticSEXP);
    Rcpp::traits::input_parameter< const int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_compute_MCMC_diagnostics(mcmc_3D_array, diagnostic, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// detect_vectorization_support
Rcpp::String detect_vectorization_support();
RcppExport SEXP _BayesMVP_detect_vectorization_support() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(detect_vectorization_support());
    return rcpp_result_gen;
END_RCPP
}
// fn_Rcpp_compute_PD_Hessian_main
Rcpp::List fn_Rcpp_compute_PD_Hessian_main(const double shrinkage_factor, const double num_diff_e, const std::string Model_type, const bool force_autodiff, const bool force_PartialLog, const bool multi_attempts, const Eigen::Matrix<double, -1, 1> theta_main_vec, const Eigen::Matrix<double, -1, 1> theta_us_vec, const Eigen::Matrix<int, -1, -1> y, const Rcpp::List Model_args_as_Rcpp_List);
RcppExport SEXP _BayesMVP_fn_Rcpp_compute_PD_Hessian_main(SEXP shrinkage_factorSEXP, SEXP num_diff_eSEXP, SEXP Model_typeSEXP, SEXP force_autodiffSEXP, SEXP force_PartialLogSEXP, SEXP multi_attemptsSEXP, SEXP theta_main_vecSEXP, SEXP theta_us_vecSEXP, SEXP ySEXP, SEXP Model_args_as_Rcpp_ListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type shrinkage_factor(shrinkage_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type num_diff_e(num_diff_eSEXP);
    Rcpp::traits::input_parameter< const std::string >::type Model_type(Model_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_autodiff(force_autodiffSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_PartialLog(force_PartialLogSEXP);
    Rcpp::traits::input_parameter< const bool >::type multi_attempts(multi_attemptsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_main_vec(theta_main_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_us_vec(theta_us_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<int, -1, -1> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Model_args_as_Rcpp_List(Model_args_as_Rcpp_ListSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_Rcpp_compute_PD_Hessian_main(shrinkage_factor, num_diff_e, Model_type, force_autodiff, force_PartialLog, multi_attempts, theta_main_vec, theta_us_vec, y, Model_args_as_Rcpp_List));
    return rcpp_result_gen;
END_RCPP
}
// fn_Rcpp_wrapper_update_M_dense_main_Hessian
Rcpp::List fn_Rcpp_wrapper_update_M_dense_main_Hessian(Eigen::Matrix<double, -1, -1> M_dense_main, Eigen::Matrix<double, -1, -1> M_inv_dense_main, Eigen::Matrix<double, -1, -1> M_inv_dense_main_chol, const double shrinkage_factor, const double ratio_Hess_main, const int interval_width, const double num_diff_e, const std::string Model_type, const bool force_autodiff, const bool force_PartialLog, const bool multi_attempts, const Eigen::Matrix<double, -1, 1> theta_main_vec, const Eigen::Matrix<double, -1, 1> theta_us_vec, const Eigen::Matrix<int, -1, -1> y, const Rcpp::List Model_args_as_Rcpp_List, const double ii, const double n_burnin, const std::string metric_type);
RcppExport SEXP _BayesMVP_fn_Rcpp_wrapper_update_M_dense_main_Hessian(SEXP M_dense_mainSEXP, SEXP M_inv_dense_mainSEXP, SEXP M_inv_dense_main_cholSEXP, SEXP shrinkage_factorSEXP, SEXP ratio_Hess_mainSEXP, SEXP interval_widthSEXP, SEXP num_diff_eSEXP, SEXP Model_typeSEXP, SEXP force_autodiffSEXP, SEXP force_PartialLogSEXP, SEXP multi_attemptsSEXP, SEXP theta_main_vecSEXP, SEXP theta_us_vecSEXP, SEXP ySEXP, SEXP Model_args_as_Rcpp_ListSEXP, SEXP iiSEXP, SEXP n_burninSEXP, SEXP metric_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1> >::type M_dense_main(M_dense_mainSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1> >::type M_inv_dense_main(M_inv_dense_mainSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1> >::type M_inv_dense_main_chol(M_inv_dense_main_cholSEXP);
    Rcpp::traits::input_parameter< const double >::type shrinkage_factor(shrinkage_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type ratio_Hess_main(ratio_Hess_mainSEXP);
    Rcpp::traits::input_parameter< const int >::type interval_width(interval_widthSEXP);
    Rcpp::traits::input_parameter< const double >::type num_diff_e(num_diff_eSEXP);
    Rcpp::traits::input_parameter< const std::string >::type Model_type(Model_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_autodiff(force_autodiffSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_PartialLog(force_PartialLogSEXP);
    Rcpp::traits::input_parameter< const bool >::type multi_attempts(multi_attemptsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_main_vec(theta_main_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_us_vec(theta_us_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<int, -1, -1> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Model_args_as_Rcpp_List(Model_args_as_Rcpp_ListSEXP);
    Rcpp::traits::input_parameter< const double >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< const double >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< const std::string >::type metric_type(metric_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_Rcpp_wrapper_update_M_dense_main_Hessian(M_dense_main, M_inv_dense_main, M_inv_dense_main_chol, shrinkage_factor, ratio_Hess_main, interval_width, num_diff_e, Model_type, force_autodiff, force_PartialLog, multi_attempts, theta_main_vec, theta_us_vec, y, Model_args_as_Rcpp_List, ii, n_burnin, metric_type));
    return rcpp_result_gen;
END_RCPP
}
// fn_find_initial_eps_main_and_us
Rcpp::List fn_find_initial_eps_main_and_us(Eigen::Matrix<double, -1, 1> theta_main_vec_initial_ref, Eigen::Matrix<double, -1, 1> theta_us_vec_initial_ref, const bool partitioned_HMC, const double seed, const std::string Model_type, const bool force_autodiff, const bool force_PartialLog, const bool multi_attempts, Eigen::Matrix<int, -1, -1> y_ref, const Rcpp::List Model_args_as_Rcpp_List, Rcpp::List EHMC_args_as_Rcpp_List, const Rcpp::List EHMC_Metric_as_Rcpp_List);
RcppExport SEXP _BayesMVP_fn_find_initial_eps_main_and_us(SEXP theta_main_vec_initial_refSEXP, SEXP theta_us_vec_initial_refSEXP, SEXP partitioned_HMCSEXP, SEXP seedSEXP, SEXP Model_typeSEXP, SEXP force_autodiffSEXP, SEXP force_PartialLogSEXP, SEXP multi_attemptsSEXP, SEXP y_refSEXP, SEXP Model_args_as_Rcpp_ListSEXP, SEXP EHMC_args_as_Rcpp_ListSEXP, SEXP EHMC_Metric_as_Rcpp_ListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type theta_main_vec_initial_ref(theta_main_vec_initial_refSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type theta_us_vec_initial_ref(theta_us_vec_initial_refSEXP);
    Rcpp::traits::input_parameter< const bool >::type partitioned_HMC(partitioned_HMCSEXP);
    Rcpp::traits::input_parameter< const double >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const std::string >::type Model_type(Model_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_autodiff(force_autodiffSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_PartialLog(force_PartialLogSEXP);
    Rcpp::traits::input_parameter< const bool >::type multi_attempts(multi_attemptsSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<int, -1, -1> >::type y_ref(y_refSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Model_args_as_Rcpp_List(Model_args_as_Rcpp_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type EHMC_args_as_Rcpp_List(EHMC_args_as_Rcpp_ListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type EHMC_Metric_as_Rcpp_List(EHMC_Metric_as_Rcpp_ListSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_find_initial_eps_main_and_us(theta_main_vec_initial_ref, theta_us_vec_initial_ref, partitioned_HMC, seed, Model_type, force_autodiff, force_PartialLog, multi_attempts, y_ref, Model_args_as_Rcpp_List, EHMC_args_as_Rcpp_List, EHMC_Metric_as_Rcpp_List));
    return rcpp_result_gen;
END_RCPP
}
// fn_Rcpp_wrapper_adapt_eps_ADAM
Eigen::Matrix<double, -1, 1> fn_Rcpp_wrapper_adapt_eps_ADAM(double eps, double eps_m_adam, double eps_v_adam, const int iter, const int n_burnin, const double LR, const double p_jump, const double adapt_delta, const double beta1_adam, const double beta2_adam, const double eps_adam);
RcppExport SEXP _BayesMVP_fn_Rcpp_wrapper_adapt_eps_ADAM(SEXP epsSEXP, SEXP eps_m_adamSEXP, SEXP eps_v_adamSEXP, SEXP iterSEXP, SEXP n_burninSEXP, SEXP LRSEXP, SEXP p_jumpSEXP, SEXP adapt_deltaSEXP, SEXP beta1_adamSEXP, SEXP beta2_adamSEXP, SEXP eps_adamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type eps_m_adam(eps_m_adamSEXP);
    Rcpp::traits::input_parameter< double >::type eps_v_adam(eps_v_adamSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< const double >::type LR(LRSEXP);
    Rcpp::traits::input_parameter< const double >::type p_jump(p_jumpSEXP);
    Rcpp::traits::input_parameter< const double >::type adapt_delta(adapt_deltaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta1_adam(beta1_adamSEXP);
    Rcpp::traits::input_parameter< const double >::type beta2_adam(beta2_adamSEXP);
    Rcpp::traits::input_parameter< const double >::type eps_adam(eps_adamSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_Rcpp_wrapper_adapt_eps_ADAM(eps, eps_m_adam, eps_v_adam, iter, n_burnin, LR, p_jump, adapt_delta, beta1_adam, beta2_adam, eps_adam));
    return rcpp_result_gen;
END_RCPP
}
// fn_update_snaper_m_and_s
Eigen::Matrix<double, -1, -1> fn_update_snaper_m_and_s(Eigen::Matrix<double, -1, 1> snaper_m, Eigen::Matrix<double, -1, 1> snaper_s_empirical, const Eigen::Matrix<double, -1, 1> theta_vec_mean, const double ii);
RcppExport SEXP _BayesMVP_fn_update_snaper_m_and_s(SEXP snaper_mSEXP, SEXP snaper_s_empiricalSEXP, SEXP theta_vec_meanSEXP, SEXP iiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type snaper_m(snaper_mSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type snaper_s_empirical(snaper_s_empiricalSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_vec_mean(theta_vec_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type ii(iiSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_update_snaper_m_and_s(snaper_m, snaper_s_empirical, theta_vec_mean, ii));
    return rcpp_result_gen;
END_RCPP
}
// fn_update_snaper_w_dense_M
Eigen::Matrix<double, -1, 1> fn_update_snaper_w_dense_M(Eigen::Matrix<double, -1, 1> snaper_w_vec, const Eigen::Matrix<double, -1, 1> eigen_vector, const double eigen_max, const Eigen::Matrix<double, -1, 1> theta_vec, const Eigen::Matrix<double, -1, 1> snaper_m_vec, const double ii, const Eigen::Matrix<double, -1, -1> M_dense_sqrt);
RcppExport SEXP _BayesMVP_fn_update_snaper_w_dense_M(SEXP snaper_w_vecSEXP, SEXP eigen_vectorSEXP, SEXP eigen_maxSEXP, SEXP theta_vecSEXP, SEXP snaper_m_vecSEXP, SEXP iiSEXP, SEXP M_dense_sqrtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type snaper_w_vec(snaper_w_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type eigen_vector(eigen_vectorSEXP);
    Rcpp::traits::input_parameter< const double >::type eigen_max(eigen_maxSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_vec(theta_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type snaper_m_vec(snaper_m_vecSEXP);
    Rcpp::traits::input_parameter< const double >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1> >::type M_dense_sqrt(M_dense_sqrtSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_update_snaper_w_dense_M(snaper_w_vec, eigen_vector, eigen_max, theta_vec, snaper_m_vec, ii, M_dense_sqrt));
    return rcpp_result_gen;
END_RCPP
}
// fn_update_snaper_w_diag_M
Eigen::Matrix<double, -1, 1> fn_update_snaper_w_diag_M(Eigen::Matrix<double, -1, 1> snaper_w_vec, const Eigen::Matrix<double, -1, 1> eigen_vector, const double eigen_max, const Eigen::Matrix<double, -1, 1> theta_vec, const Eigen::Matrix<double, -1, 1> snaper_m_vec, const double ii, const Eigen::Matrix<double, -1, 1> sqrt_M_vec);
RcppExport SEXP _BayesMVP_fn_update_snaper_w_diag_M(SEXP snaper_w_vecSEXP, SEXP eigen_vectorSEXP, SEXP eigen_maxSEXP, SEXP theta_vecSEXP, SEXP snaper_m_vecSEXP, SEXP iiSEXP, SEXP sqrt_M_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type snaper_w_vec(snaper_w_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type eigen_vector(eigen_vectorSEXP);
    Rcpp::traits::input_parameter< const double >::type eigen_max(eigen_maxSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_vec(theta_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type snaper_m_vec(snaper_m_vecSEXP);
    Rcpp::traits::input_parameter< const double >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type sqrt_M_vec(sqrt_M_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_update_snaper_w_diag_M(snaper_w_vec, eigen_vector, eigen_max, theta_vec, snaper_m_vec, ii, sqrt_M_vec));
    return rcpp_result_gen;
END_RCPP
}
// fn_update_eigen_max_and_eigen_vec
Eigen::Matrix<double, -1, 1> fn_update_eigen_max_and_eigen_vec(const Eigen::Matrix<double, -1, 1> snaper_w_vec);
RcppExport SEXP _BayesMVP_fn_update_eigen_max_and_eigen_vec(SEXP snaper_w_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type snaper_w_vec(snaper_w_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_update_eigen_max_and_eigen_vec(snaper_w_vec));
    return rcpp_result_gen;
END_RCPP
}
// fn_Rcpp_wrapper_update_tau_w_diag_M_ADAM
Eigen::Matrix<double, -1, 1> fn_Rcpp_wrapper_update_tau_w_diag_M_ADAM(const Eigen::Matrix<double, -1, 1> eigen_vector, const double eigen_max, const Eigen::Matrix<double, -1, 1> theta_vec_initial, const Eigen::Matrix<double, -1, 1> theta_vec_prop, const Eigen::Matrix<double, -1, 1> snaper_m_vec, const Eigen::Matrix<double, -1, 1> velocity_prop, const Eigen::Matrix<double, -1, 1> velocity_0, double tau, const double LR, const double ii, const double n_burnin, const Eigen::Matrix<double, -1, 1> sqrt_M_vec, double tau_m_adam, double tau_v_adam, const double tau_ii);
RcppExport SEXP _BayesMVP_fn_Rcpp_wrapper_update_tau_w_diag_M_ADAM(SEXP eigen_vectorSEXP, SEXP eigen_maxSEXP, SEXP theta_vec_initialSEXP, SEXP theta_vec_propSEXP, SEXP snaper_m_vecSEXP, SEXP velocity_propSEXP, SEXP velocity_0SEXP, SEXP tauSEXP, SEXP LRSEXP, SEXP iiSEXP, SEXP n_burninSEXP, SEXP sqrt_M_vecSEXP, SEXP tau_m_adamSEXP, SEXP tau_v_adamSEXP, SEXP tau_iiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type eigen_vector(eigen_vectorSEXP);
    Rcpp::traits::input_parameter< const double >::type eigen_max(eigen_maxSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_vec_initial(theta_vec_initialSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_vec_prop(theta_vec_propSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type snaper_m_vec(snaper_m_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type velocity_prop(velocity_propSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type velocity_0(velocity_0SEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type LR(LRSEXP);
    Rcpp::traits::input_parameter< const double >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< const double >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type sqrt_M_vec(sqrt_M_vecSEXP);
    Rcpp::traits::input_parameter< double >::type tau_m_adam(tau_m_adamSEXP);
    Rcpp::traits::input_parameter< double >::type tau_v_adam(tau_v_adamSEXP);
    Rcpp::traits::input_parameter< const double >::type tau_ii(tau_iiSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_Rcpp_wrapper_update_tau_w_diag_M_ADAM(eigen_vector, eigen_max, theta_vec_initial, theta_vec_prop, snaper_m_vec, velocity_prop, velocity_0, tau, LR, ii, n_burnin, sqrt_M_vec, tau_m_adam, tau_v_adam, tau_ii));
    return rcpp_result_gen;
END_RCPP
}
// fn_Rcpp_wrapper_update_tau_w_dense_M_ADAM
Eigen::Matrix<double, -1, 1> fn_Rcpp_wrapper_update_tau_w_dense_M_ADAM(const Eigen::Matrix<double, -1, 1> eigen_vector, const double eigen_max, const Eigen::Matrix<double, -1, 1> theta_vec_initial, const Eigen::Matrix<double, -1, 1> theta_vec_prop, const Eigen::Matrix<double, -1, 1> snaper_m_vec, const Eigen::Matrix<double, -1, 1> velocity_prop, const Eigen::Matrix<double, -1, 1> velocity_0, double tau, const double LR, const double ii, const double n_burnin, const Eigen::Matrix<double, -1, -1> M_dense_sqrt, double tau_m_adam, double tau_v_adam, const double tau_ii);
RcppExport SEXP _BayesMVP_fn_Rcpp_wrapper_update_tau_w_dense_M_ADAM(SEXP eigen_vectorSEXP, SEXP eigen_maxSEXP, SEXP theta_vec_initialSEXP, SEXP theta_vec_propSEXP, SEXP snaper_m_vecSEXP, SEXP velocity_propSEXP, SEXP velocity_0SEXP, SEXP tauSEXP, SEXP LRSEXP, SEXP iiSEXP, SEXP n_burninSEXP, SEXP M_dense_sqrtSEXP, SEXP tau_m_adamSEXP, SEXP tau_v_adamSEXP, SEXP tau_iiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type eigen_vector(eigen_vectorSEXP);
    Rcpp::traits::input_parameter< const double >::type eigen_max(eigen_maxSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_vec_initial(theta_vec_initialSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type theta_vec_prop(theta_vec_propSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type snaper_m_vec(snaper_m_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type velocity_prop(velocity_propSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, 1> >::type velocity_0(velocity_0SEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type LR(LRSEXP);
    Rcpp::traits::input_parameter< const double >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< const double >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1> >::type M_dense_sqrt(M_dense_sqrtSEXP);
    Rcpp::traits::input_parameter< double >::type tau_m_adam(tau_m_adamSEXP);
    Rcpp::traits::input_parameter< double >::type tau_v_adam(tau_v_adamSEXP);
    Rcpp::traits::input_parameter< const double >::type tau_ii(tau_iiSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_Rcpp_wrapper_update_tau_w_dense_M_ADAM(eigen_vector, eigen_max, theta_vec_initial, theta_vec_prop, snaper_m_vec, velocity_prop, velocity_0, tau, LR, ii, n_burnin, M_dense_sqrt, tau_m_adam, tau_v_adam, tau_ii));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_det
double Rcpp_det(const Eigen::Matrix<double, -1, -1>& mat);
RcppExport SEXP _BayesMVP_Rcpp_det(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1>& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_det(mat));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_log_det
double Rcpp_log_det(const Eigen::Matrix<double, -1, -1>& mat);
RcppExport SEXP _BayesMVP_Rcpp_log_det(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1>& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_log_det(mat));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_solve
Eigen::Matrix<double, -1, -1> Rcpp_solve(const Eigen::Matrix<double, -1, -1>& mat);
RcppExport SEXP _BayesMVP_Rcpp_solve(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1>& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_solve(mat));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_Chol
Eigen::Matrix<double, -1, -1> Rcpp_Chol(const Eigen::Matrix<double, -1, -1>& mat);
RcppExport SEXP _BayesMVP_Rcpp_Chol(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1>& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_Chol(mat));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_near_PD
Eigen::Matrix<double, -1, -1> Rcpp_near_PD(const Eigen::Matrix<double, -1, -1>& mat);
RcppExport SEXP _BayesMVP_Rcpp_near_PD(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1>& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_near_PD(mat));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_shrink_matrix
Eigen::Matrix<double, -1, -1> Rcpp_shrink_matrix(const Eigen::Matrix<double, -1, -1>& mat, const double shrinkage_factor);
RcppExport SEXP _BayesMVP_Rcpp_shrink_matrix(SEXP matSEXP, SEXP shrinkage_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1>& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const double >::type shrinkage_factor(shrinkage_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_shrink_matrix(mat, shrinkage_factor));
    return rcpp_result_gen;
END_RCPP
}
// fn_compute_param_constrain_from_trace_parallel
Rcpp::List fn_compute_param_constrain_from_trace_parallel(const std::vector<Eigen::Matrix<double, -1, -1>> unc_params_trace_input_main, const std::vector<Eigen::Matrix<double, -1, -1>> unc_params_trace_input_nuisance, const std::vector<int> pars_indicies_to_track, const int n_params_full, const int n_nuisance, const int n_params_main, const bool include_nuisance, const std::string model_so_file, const std::string json_file_path);
RcppExport SEXP _BayesMVP_fn_compute_param_constrain_from_trace_parallel(SEXP unc_params_trace_input_mainSEXP, SEXP unc_params_trace_input_nuisanceSEXP, SEXP pars_indicies_to_trackSEXP, SEXP n_params_fullSEXP, SEXP n_nuisanceSEXP, SEXP n_params_mainSEXP, SEXP include_nuisanceSEXP, SEXP model_so_fileSEXP, SEXP json_file_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, -1, -1>> >::type unc_params_trace_input_main(unc_params_trace_input_mainSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::Matrix<double, -1, -1>> >::type unc_params_trace_input_nuisance(unc_params_trace_input_nuisanceSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type pars_indicies_to_track(pars_indicies_to_trackSEXP);
    Rcpp::traits::input_parameter< const int >::type n_params_full(n_params_fullSEXP);
    Rcpp::traits::input_parameter< const int >::type n_nuisance(n_nuisanceSEXP);
    Rcpp::traits::input_parameter< const int >::type n_params_main(n_params_mainSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nuisance(include_nuisanceSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model_so_file(model_so_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type json_file_path(json_file_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_compute_param_constrain_from_trace_parallel(unc_params_trace_input_main, unc_params_trace_input_nuisance, pars_indicies_to_track, n_params_full, n_nuisance, n_params_main, include_nuisance, model_so_file, json_file_path));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_fn_RcppParallel_EHMC_sampling
Rcpp::List Rcpp_fn_RcppParallel_EHMC_sampling(const int n_threads_R, const int seed_R, const int n_iter_R, const bool iter_one_by_one, const bool partitioned_HMC_R, const std::string Model_type_R, const bool sample_nuisance_R, const bool force_autodiff_R, const bool force_PartialLog_R, const bool multi_attempts_R, const int n_nuisance_to_track, const Eigen::Matrix<double, -1, -1> theta_main_vectors_all_chains_input_from_R, const Eigen::Matrix<double, -1, -1> theta_us_vectors_all_chains_input_from_R, const Eigen::Matrix<int, -1, -1> y_Eigen_R, const Rcpp::List Model_args_as_Rcpp_List, const Rcpp::List EHMC_args_as_Rcpp_List, const Rcpp::List EHMC_Metric_as_Rcpp_List);
RcppExport SEXP _BayesMVP_Rcpp_fn_RcppParallel_EHMC_sampling(SEXP n_threads_RSEXP, SEXP seed_RSEXP, SEXP n_iter_RSEXP, SEXP iter_one_by_oneSEXP, SEXP partitioned_HMC_RSEXP, SEXP Model_type_RSEXP, SEXP sample_nuisance_RSEXP, SEXP force_autodiff_RSEXP, SEXP force_PartialLog_RSEXP, SEXP multi_attempts_RSEXP, SEXP n_nuisance_to_trackSEXP, SEXP theta_main_vectors_all_chains_input_from_RSEXP, SEXP theta_us_vectors_all_chains_input_from_RSEXP, SEXP y_Eigen_RSEXP, SEXP Model_args_as_Rcpp_ListSEXP, SEXP EHMC_args_as_Rcpp_ListSEXP, SEXP EHMC_Metric_as_Rcpp_ListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n_threads_R(n_threads_RSEXP);
    Rcpp::traits::input_parameter< const int >::type seed_R(seed_RSEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter_R(n_iter_RSEXP);
    Rcpp::traits::input_parameter< const bool >::type iter_one_by_one(iter_one_by_oneSEXP);
    Rcpp::traits::input_parameter< const bool >::type partitioned_HMC_R(partitioned_HMC_RSEXP);
    Rcpp::traits::input_parameter< const std::string >::type Model_type_R(Model_type_RSEXP);
    Rcpp::traits::input_parameter< const bool >::type sample_nuisance_R(sample_nuisance_RSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_autodiff_R(force_autodiff_RSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_PartialLog_R(force_PartialLog_RSEXP);
    Rcpp::traits::input_parameter< const bool >::type multi_attempts_R(multi_attempts_RSEXP);
    Rcpp::traits::input_parameter< const int >::type n_nuisance_to_track(n_nuisance_to_trackSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1> >::type theta_main_vectors_all_chains_input_from_R(theta_main_vectors_all_chains_input_from_RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1> >::type theta_us_vectors_all_chains_input_from_R(theta_us_vectors_all_chains_input_from_RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<int, -1, -1> >::type y_Eigen_R(y_Eigen_RSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Model_args_as_Rcpp_List(Model_args_as_Rcpp_ListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type EHMC_args_as_Rcpp_List(EHMC_args_as_Rcpp_ListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type EHMC_Metric_as_Rcpp_List(EHMC_Metric_as_Rcpp_ListSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_fn_RcppParallel_EHMC_sampling(n_threads_R, seed_R, n_iter_R, iter_one_by_one, partitioned_HMC_R, Model_type_R, sample_nuisance_R, force_autodiff_R, force_PartialLog_R, multi_attempts_R, n_nuisance_to_track, theta_main_vectors_all_chains_input_from_R, theta_us_vectors_all_chains_input_from_R, y_Eigen_R, Model_args_as_Rcpp_List, EHMC_args_as_Rcpp_List, EHMC_Metric_as_Rcpp_List));
    return rcpp_result_gen;
END_RCPP
}
// fn_R_RcppParallel_EHMC_single_iter_burnin
Rcpp::List fn_R_RcppParallel_EHMC_single_iter_burnin(int n_threads_R, int seed_R, int n_iter_R, int current_iter_R, int n_adapt, const bool burnin_indicator, std::string Model_type_R, bool sample_nuisance_R, bool force_autodiff_R, bool force_PartialLog_R, bool multi_attempts_R, const int n_nuisance_to_track, const double max_eps_main, const double max_eps_us, bool partitioned_HMC_R, const std::string metric_type_main, double shrinkage_factor, const std::string metric_type_nuisance, const double tau_main_target, const double tau_us_target, const int clip_iter, const int gap, const bool main_L_manual, const bool us_L_manual, const int L_main_if_manual, const int L_us_if_manual, const int max_L, const double tau_mult, const double ratio_M_us, const double ratio_Hess_main, const int M_interval_width, Eigen::Matrix<double, -1, -1> theta_main_vectors_all_chains_input_from_R, Eigen::Matrix<double, -1, -1> theta_us_vectors_all_chains_input_from_R, const Eigen::Matrix<int, -1, -1> y_Eigen_R, const Rcpp::List Model_args_as_Rcpp_List, Rcpp::List EHMC_args_as_Rcpp_List, Rcpp::List EHMC_Metric_as_Rcpp_List, Rcpp::List EHMC_burnin_as_Rcpp_List);
RcppExport SEXP _BayesMVP_fn_R_RcppParallel_EHMC_single_iter_burnin(SEXP n_threads_RSEXP, SEXP seed_RSEXP, SEXP n_iter_RSEXP, SEXP current_iter_RSEXP, SEXP n_adaptSEXP, SEXP burnin_indicatorSEXP, SEXP Model_type_RSEXP, SEXP sample_nuisance_RSEXP, SEXP force_autodiff_RSEXP, SEXP force_PartialLog_RSEXP, SEXP multi_attempts_RSEXP, SEXP n_nuisance_to_trackSEXP, SEXP max_eps_mainSEXP, SEXP max_eps_usSEXP, SEXP partitioned_HMC_RSEXP, SEXP metric_type_mainSEXP, SEXP shrinkage_factorSEXP, SEXP metric_type_nuisanceSEXP, SEXP tau_main_targetSEXP, SEXP tau_us_targetSEXP, SEXP clip_iterSEXP, SEXP gapSEXP, SEXP main_L_manualSEXP, SEXP us_L_manualSEXP, SEXP L_main_if_manualSEXP, SEXP L_us_if_manualSEXP, SEXP max_LSEXP, SEXP tau_multSEXP, SEXP ratio_M_usSEXP, SEXP ratio_Hess_mainSEXP, SEXP M_interval_widthSEXP, SEXP theta_main_vectors_all_chains_input_from_RSEXP, SEXP theta_us_vectors_all_chains_input_from_RSEXP, SEXP y_Eigen_RSEXP, SEXP Model_args_as_Rcpp_ListSEXP, SEXP EHMC_args_as_Rcpp_ListSEXP, SEXP EHMC_Metric_as_Rcpp_ListSEXP, SEXP EHMC_burnin_as_Rcpp_ListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_threads_R(n_threads_RSEXP);
    Rcpp::traits::input_parameter< int >::type seed_R(seed_RSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter_R(n_iter_RSEXP);
    Rcpp::traits::input_parameter< int >::type current_iter_R(current_iter_RSEXP);
    Rcpp::traits::input_parameter< int >::type n_adapt(n_adaptSEXP);
    Rcpp::traits::input_parameter< const bool >::type burnin_indicator(burnin_indicatorSEXP);
    Rcpp::traits::input_parameter< std::string >::type Model_type_R(Model_type_RSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_nuisance_R(sample_nuisance_RSEXP);
    Rcpp::traits::input_parameter< bool >::type force_autodiff_R(force_autodiff_RSEXP);
    Rcpp::traits::input_parameter< bool >::type force_PartialLog_R(force_PartialLog_RSEXP);
    Rcpp::traits::input_parameter< bool >::type multi_attempts_R(multi_attempts_RSEXP);
    Rcpp::traits::input_parameter< const int >::type n_nuisance_to_track(n_nuisance_to_trackSEXP);
    Rcpp::traits::input_parameter< const double >::type max_eps_main(max_eps_mainSEXP);
    Rcpp::traits::input_parameter< const double >::type max_eps_us(max_eps_usSEXP);
    Rcpp::traits::input_parameter< bool >::type partitioned_HMC_R(partitioned_HMC_RSEXP);
    Rcpp::traits::input_parameter< const std::string >::type metric_type_main(metric_type_mainSEXP);
    Rcpp::traits::input_parameter< double >::type shrinkage_factor(shrinkage_factorSEXP);
    Rcpp::traits::input_parameter< const std::string >::type metric_type_nuisance(metric_type_nuisanceSEXP);
    Rcpp::traits::input_parameter< const double >::type tau_main_target(tau_main_targetSEXP);
    Rcpp::traits::input_parameter< const double >::type tau_us_target(tau_us_targetSEXP);
    Rcpp::traits::input_parameter< const int >::type clip_iter(clip_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type gap(gapSEXP);
    Rcpp::traits::input_parameter< const bool >::type main_L_manual(main_L_manualSEXP);
    Rcpp::traits::input_parameter< const bool >::type us_L_manual(us_L_manualSEXP);
    Rcpp::traits::input_parameter< const int >::type L_main_if_manual(L_main_if_manualSEXP);
    Rcpp::traits::input_parameter< const int >::type L_us_if_manual(L_us_if_manualSEXP);
    Rcpp::traits::input_parameter< const int >::type max_L(max_LSEXP);
    Rcpp::traits::input_parameter< const double >::type tau_mult(tau_multSEXP);
    Rcpp::traits::input_parameter< const double >::type ratio_M_us(ratio_M_usSEXP);
    Rcpp::traits::input_parameter< const double >::type ratio_Hess_main(ratio_Hess_mainSEXP);
    Rcpp::traits::input_parameter< const int >::type M_interval_width(M_interval_widthSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1> >::type theta_main_vectors_all_chains_input_from_R(theta_main_vectors_all_chains_input_from_RSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1> >::type theta_us_vectors_all_chains_input_from_R(theta_us_vectors_all_chains_input_from_RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<int, -1, -1> >::type y_Eigen_R(y_Eigen_RSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Model_args_as_Rcpp_List(Model_args_as_Rcpp_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type EHMC_args_as_Rcpp_List(EHMC_args_as_Rcpp_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type EHMC_Metric_as_Rcpp_List(EHMC_Metric_as_Rcpp_ListSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type EHMC_burnin_as_Rcpp_List(EHMC_burnin_as_Rcpp_ListSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_R_RcppParallel_EHMC_single_iter_burnin(n_threads_R, seed_R, n_iter_R, current_iter_R, n_adapt, burnin_indicator, Model_type_R, sample_nuisance_R, force_autodiff_R, force_PartialLog_R, multi_attempts_R, n_nuisance_to_track, max_eps_main, max_eps_us, partitioned_HMC_R, metric_type_main, shrinkage_factor, metric_type_nuisance, tau_main_target, tau_us_target, clip_iter, gap, main_L_manual, us_L_manual, L_main_if_manual, L_us_if_manual, max_L, tau_mult, ratio_M_us, ratio_Hess_main, M_interval_width, theta_main_vectors_all_chains_input_from_R, theta_us_vectors_all_chains_input_from_R, y_Eigen_R, Model_args_as_Rcpp_List, EHMC_args_as_Rcpp_List, EHMC_Metric_as_Rcpp_List, EHMC_burnin_as_Rcpp_List));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_fn_OpenMP_EHMC_sampling
Rcpp::List Rcpp_fn_OpenMP_EHMC_sampling(const int n_threads_R, const int seed_R, const int n_iter_R, const bool iter_one_by_one, const bool partitioned_HMC_R, const std::string Model_type_R, const bool sample_nuisance_R, const bool force_autodiff_R, const bool force_PartialLog_R, const bool multi_attempts_R, const int n_nuisance_to_track, const Eigen::Matrix<double, -1, -1> theta_main_vectors_all_chains_input_from_R, const Eigen::Matrix<double, -1, -1> theta_us_vectors_all_chains_input_from_R, const Eigen::Matrix<int, -1, -1> y_Eigen_R, const Rcpp::List Model_args_as_Rcpp_List, const Rcpp::List EHMC_args_as_Rcpp_List, const Rcpp::List EHMC_Metric_as_Rcpp_List);
RcppExport SEXP _BayesMVP_Rcpp_fn_OpenMP_EHMC_sampling(SEXP n_threads_RSEXP, SEXP seed_RSEXP, SEXP n_iter_RSEXP, SEXP iter_one_by_oneSEXP, SEXP partitioned_HMC_RSEXP, SEXP Model_type_RSEXP, SEXP sample_nuisance_RSEXP, SEXP force_autodiff_RSEXP, SEXP force_PartialLog_RSEXP, SEXP multi_attempts_RSEXP, SEXP n_nuisance_to_trackSEXP, SEXP theta_main_vectors_all_chains_input_from_RSEXP, SEXP theta_us_vectors_all_chains_input_from_RSEXP, SEXP y_Eigen_RSEXP, SEXP Model_args_as_Rcpp_ListSEXP, SEXP EHMC_args_as_Rcpp_ListSEXP, SEXP EHMC_Metric_as_Rcpp_ListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n_threads_R(n_threads_RSEXP);
    Rcpp::traits::input_parameter< const int >::type seed_R(seed_RSEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter_R(n_iter_RSEXP);
    Rcpp::traits::input_parameter< const bool >::type iter_one_by_one(iter_one_by_oneSEXP);
    Rcpp::traits::input_parameter< const bool >::type partitioned_HMC_R(partitioned_HMC_RSEXP);
    Rcpp::traits::input_parameter< const std::string >::type Model_type_R(Model_type_RSEXP);
    Rcpp::traits::input_parameter< const bool >::type sample_nuisance_R(sample_nuisance_RSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_autodiff_R(force_autodiff_RSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_PartialLog_R(force_PartialLog_RSEXP);
    Rcpp::traits::input_parameter< const bool >::type multi_attempts_R(multi_attempts_RSEXP);
    Rcpp::traits::input_parameter< const int >::type n_nuisance_to_track(n_nuisance_to_trackSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1> >::type theta_main_vectors_all_chains_input_from_R(theta_main_vectors_all_chains_input_from_RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1> >::type theta_us_vectors_all_chains_input_from_R(theta_us_vectors_all_chains_input_from_RSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<int, -1, -1> >::type y_Eigen_R(y_Eigen_RSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Model_args_as_Rcpp_List(Model_args_as_Rcpp_ListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type EHMC_args_as_Rcpp_List(EHMC_args_as_Rcpp_ListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type EHMC_Metric_as_Rcpp_List(EHMC_Metric_as_Rcpp_ListSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_fn_OpenMP_EHMC_sampling(n_threads_R, seed_R, n_iter_R, iter_one_by_one, partitioned_HMC_R, Model_type_R, sample_nuisance_R, force_autodiff_R, force_PartialLog_R, multi_attempts_R, n_nuisance_to_track, theta_main_vectors_all_chains_input_from_R, theta_us_vectors_all_chains_input_from_R, y_Eigen_R, Model_args_as_Rcpp_List, EHMC_args_as_Rcpp_List, EHMC_Metric_as_Rcpp_List));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesMVP_checkCPUFeatures", (DL_FUNC) &_BayesMVP_checkCPUFeatures, 0},
    {"_BayesMVP_Rcpp_wrapper_EIGEN_double_mat", (DL_FUNC) &_BayesMVP_Rcpp_wrapper_EIGEN_double_mat, 4},
    {"_BayesMVP_Rcpp_wrapper_EIGEN_double_colvec", (DL_FUNC) &_BayesMVP_Rcpp_wrapper_EIGEN_double_colvec, 4},
    {"_BayesMVP_Rcpp_wrapper_fn_lp_grad", (DL_FUNC) &_BayesMVP_Rcpp_wrapper_fn_lp_grad, 9},
    {"_BayesMVP_Rcpp_compute_chain_stats", (DL_FUNC) &_BayesMVP_Rcpp_compute_chain_stats, 3},
    {"_BayesMVP_Rcpp_compute_MCMC_diagnostics", (DL_FUNC) &_BayesMVP_Rcpp_compute_MCMC_diagnostics, 3},
    {"_BayesMVP_detect_vectorization_support", (DL_FUNC) &_BayesMVP_detect_vectorization_support, 0},
    {"_BayesMVP_fn_Rcpp_compute_PD_Hessian_main", (DL_FUNC) &_BayesMVP_fn_Rcpp_compute_PD_Hessian_main, 10},
    {"_BayesMVP_fn_Rcpp_wrapper_update_M_dense_main_Hessian", (DL_FUNC) &_BayesMVP_fn_Rcpp_wrapper_update_M_dense_main_Hessian, 18},
    {"_BayesMVP_fn_find_initial_eps_main_and_us", (DL_FUNC) &_BayesMVP_fn_find_initial_eps_main_and_us, 12},
    {"_BayesMVP_fn_Rcpp_wrapper_adapt_eps_ADAM", (DL_FUNC) &_BayesMVP_fn_Rcpp_wrapper_adapt_eps_ADAM, 11},
    {"_BayesMVP_fn_update_snaper_m_and_s", (DL_FUNC) &_BayesMVP_fn_update_snaper_m_and_s, 4},
    {"_BayesMVP_fn_update_snaper_w_dense_M", (DL_FUNC) &_BayesMVP_fn_update_snaper_w_dense_M, 7},
    {"_BayesMVP_fn_update_snaper_w_diag_M", (DL_FUNC) &_BayesMVP_fn_update_snaper_w_diag_M, 7},
    {"_BayesMVP_fn_update_eigen_max_and_eigen_vec", (DL_FUNC) &_BayesMVP_fn_update_eigen_max_and_eigen_vec, 1},
    {"_BayesMVP_fn_Rcpp_wrapper_update_tau_w_diag_M_ADAM", (DL_FUNC) &_BayesMVP_fn_Rcpp_wrapper_update_tau_w_diag_M_ADAM, 15},
    {"_BayesMVP_fn_Rcpp_wrapper_update_tau_w_dense_M_ADAM", (DL_FUNC) &_BayesMVP_fn_Rcpp_wrapper_update_tau_w_dense_M_ADAM, 15},
    {"_BayesMVP_Rcpp_det", (DL_FUNC) &_BayesMVP_Rcpp_det, 1},
    {"_BayesMVP_Rcpp_log_det", (DL_FUNC) &_BayesMVP_Rcpp_log_det, 1},
    {"_BayesMVP_Rcpp_solve", (DL_FUNC) &_BayesMVP_Rcpp_solve, 1},
    {"_BayesMVP_Rcpp_Chol", (DL_FUNC) &_BayesMVP_Rcpp_Chol, 1},
    {"_BayesMVP_Rcpp_near_PD", (DL_FUNC) &_BayesMVP_Rcpp_near_PD, 1},
    {"_BayesMVP_Rcpp_shrink_matrix", (DL_FUNC) &_BayesMVP_Rcpp_shrink_matrix, 2},
    {"_BayesMVP_fn_compute_param_constrain_from_trace_parallel", (DL_FUNC) &_BayesMVP_fn_compute_param_constrain_from_trace_parallel, 9},
    {"_BayesMVP_Rcpp_fn_RcppParallel_EHMC_sampling", (DL_FUNC) &_BayesMVP_Rcpp_fn_RcppParallel_EHMC_sampling, 17},
    {"_BayesMVP_fn_R_RcppParallel_EHMC_single_iter_burnin", (DL_FUNC) &_BayesMVP_fn_R_RcppParallel_EHMC_single_iter_burnin, 38},
    {"_BayesMVP_Rcpp_fn_OpenMP_EHMC_sampling", (DL_FUNC) &_BayesMVP_Rcpp_fn_OpenMP_EHMC_sampling, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesMVP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
